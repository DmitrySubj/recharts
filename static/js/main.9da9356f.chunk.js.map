{"version":3,"sources":["data.ts","hooks/useZScore.ts","hooks/useZColor.ts","components/LinearGradient/index.tsx","components/CustomizedDot/index.tsx","App.tsx","index.tsx"],"names":["data","name","uv","pv","amt","useZScore","values","setValues","useState","sum","a","b","average","reduce","length","dispersionSum","map","el","Math","pow","dispersion","sqrt","zScore","x","useEffect","useZColor","arguments","undefined","breakpoint","percent","setPercent","min","colorBreakPointPercentage","max","LinearGradient","_ref","id","offsetPoint","_jsxs","x1","y1","x2","y2","children","_jsx","offset","stopColor","CustomizedDot","props","r","stroke","fill","strokeWidth","className","App","xPvValues","useMemo","xUvValues","zScorePv","zScorePvColorPercent","zScoreUv","zScoreUvColorPercent","ResponsiveContainer","width","height","LineChart","margin","top","accessibilityLayer","CartesianGrid","strokeDasharray","XAxis","dataKey","padding","left","right","YAxis","Tooltip","Legend","iconSize","Line","type","dot","Dot","index","activeDot","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.9da9356f.chunk.js","sourcesContent":["export const data = [\n    {\n        name: \"Page A\",\n        uv: 4000,\n        pv: 2400,\n        amt: 2400,\n    },\n    {\n        name: \"Page B\",\n        uv: 3000,\n        pv: 1398,\n        amt: 2210,\n    },\n    {\n        name: \"Page C\",\n        uv: 2000,\n        pv: 9800,\n        amt: 2290,\n    },\n    {\n        name: \"Page D\",\n        uv: 2780,\n        pv: 3908,\n        amt: 2000,\n    },\n    {\n        name: \"Page E\",\n        uv: 1890,\n        pv: 4800,\n        amt: 2181,\n    },\n    {\n        name: \"Page F\",\n        uv: 2390,\n        pv: 3800,\n        amt: 2500,\n    },\n    {\n        name: \"Page G\",\n        uv: 3490,\n        pv: 4300,\n        amt: 2100,\n    },\n]\n","import {useEffect, useState} from \"react\";\n\nexport const useZScore = (data: Array<number>) => {\n    const [values, setValues] = useState<Array<number>>([]);\n\n    const getDeviation = (el: number) => Math.pow(el - average,  2);\n    const sum = (a: number, b: number) => a + b\n\n    const average =  data.reduce(sum, 0)/data.length;\n    const dispersionSum = data.map(getDeviation).reduce(sum, 0)/data.length;\n\n    const dispersion = Math.sqrt(dispersionSum);\n\n    const getZScore = (x: number) => (x - average) / dispersion;\n    const zScore = data.map(getZScore);\n\n    useEffect(() => {\n        setValues(zScore);\n    }, [data])\n\n    return values;\n}","import {useEffect, useState} from \"react\";\n\n\nexport const useZColor = (values: Array<number> = [], breakpoint: number = 0) => {\n    const [percent, setPercent] = useState<string>('0%');\n    const min = Math.min(...values) || 0;\n    const max = Math.max(...values) || 0;\n\n    const colorBreakPointPercentage = `${(1 - ((breakpoint - min) / (max - min))) * 100}%`;\n\n    useEffect(() => {\n        if (values.length > 0) {\n            setPercent(colorBreakPointPercentage);\n        }\n    }, [values, breakpoint]);\n\n    return percent;\n}","import React from 'react';\n\nexport const LinearGradient = ({ id, offsetPoint }: { id: string, offsetPoint: string }) => {\n    return (\n        <linearGradient id={id} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"red\"/>\n            <stop offset={offsetPoint} stopColor=\"red\"/>\n            <stop offset={offsetPoint} stopColor=\"green\"/>\n            <stop offset=\"100%\" stopColor=\"green\"/>\n        </linearGradient>\n    );\n};\n\n","import React from 'react';\nimport {DotProps} from \"recharts\";\n\nexport type TProps = DotProps & React.SVGProps<SVGCircleElement>;\n\nexport const CustomizedDot: React.FC<TProps> = (props) => {\n    return (\n        <circle\n            {...props}\n            r=\"3\"\n            stroke={props.stroke}\n            fill={props.stroke}\n            strokeWidth=\"2\"\n            className=\"recharts-dot\"></circle>\n    )\n}\n","import \"./styles.css\";\nimport React, {useMemo} from \"react\";\nimport {CartesianGrid, Dot, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis} from \"recharts\";\nimport {data} from \"./data\";\nimport {useZScore} from \"./hooks/useZScore\";\nimport {useZColor} from \"./hooks/useZColor\";\nimport {LinearGradient} from \"./components/LinearGradient\";\nimport {CustomizedDot } from \"./components/CustomizedDot\";\n\nexport default function App() {\n    const xPvValues =  useMemo(() => data.map(el => el.pv), [data]);\n    const xUvValues =  useMemo(() => data.map(el => el.uv), [data]);\n\n    const zScorePv = useZScore(xPvValues);\n    const zScorePvColorPercent = useZColor(zScorePv, 1);\n    const zScoreUv = useZScore(xUvValues);\n    const zScoreUvColorPercent = useZColor(zScoreUv, 1);\n\n\n    return (\n        <ResponsiveContainer width={\"100%\"} height={300}>\n            <LineChart data={data} margin={{top: 20}} accessibilityLayer>\n                <defs>\n                    <LinearGradient id='colorPv' offsetPoint={zScorePvColorPercent} />\n                    <LinearGradient id='colorUv' offsetPoint={zScoreUvColorPercent} />\n                </defs>\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"name\" padding={{left: 30, right: 30}}/>\n                <YAxis/>\n                <Tooltip/>\n                <Legend iconSize={24}/>\n\n                <Line\n                    type=\"monotone\"\n                    dataKey=\"pv\"\n                    stroke=\"url(#colorPv)\"\n                    dot={(props) => <Dot {...props} stroke={zScorePv[props.index] > 1 ? 'red' : 'green'} />}\n                    activeDot={(props) => <CustomizedDot {...props} stroke={zScorePv[props.index] > 1 ? 'red' : 'green'} />}\n                />\n                <Line\n                    type=\"monotone\"\n                    dataKey=\"uv\"\n                    stroke=\"url(#colorUv)\"\n                    dot={(props) => <Dot {...props} stroke={zScoreUv[props.index] > 1 ? 'red' : 'green'} />}\n                    activeDot={(props) => <CustomizedDot {...props} stroke={zScoreUv[props.index] > 1 ? 'red' : 'green'} />}\n                />\n\n            </LineChart>\n        </ResponsiveContainer>\n    );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}